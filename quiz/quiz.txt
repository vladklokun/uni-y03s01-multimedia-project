#
Header: Як перевірити, чи встановлений Git?

Question: Ви щойно встановили Git і відкрили термінал. Введіть команду, яка дозволить перевірити працездатність Git — виведе його версію.

Answer: git --version

#
Header: Первинне налаштування Git: як додати ім'я?

Question: Добре! Git встановлений і працездатний. Тепер необхідно налаштувати вашу особу. Введіть команду, яка встановить ім'я користувача «Ivan Developer» на глобальному рівні.

Answer: git config --global user.name "Ivan Developer"

#
Header: Первинне налаштування Git: як додати e-mail?

Question: Ім'я збережене. Введіть команду, яка встановить e-mail "ideveloper@example.com" на рівні тільки даного проекту.

Answer: git config user.email "ideveloper@example.com"

#
Header: Первинне налаштування Git: як встановити текстовий редактор?

Question: Тепер необхідні дані про розробника введені, настав час встановити текстовий редактор для роботи з Git. Введіть команду, яка встановить текстовий редактор «nvim» за замовчуванням на глобальному рівні.

Answer: git config --global core.editor nvim

#
Header: Первинне налаштування Git: як перевірити встановлені налаштування?

Question: Перевіримо встановлені налаштування. Введіть команду, яка виведе список встановлених налаштувань.

Answer: git config --list

#
Header: Документація: як переглянути детальну інформацію про утиліту?

Question: Введіть команду, яка надасть детальну інформацію про утиліту `git-add`.

Answer: git help add

#
Header: Створення репозиторію: як ініціалізувати директорію?

Question: Ви щойно створили директорію для нового проекту і перейшли в неї, для роботи з Git вам необхідно її ініціалізувати. Введіть команду, яка ініціалізує поточну директорію.

Answer: git init

#
Header: Налаштування репозиторію: який файл відповідає за ігнорування файлів?

Question: Вам необхідно, щоб Git ігнорував певні файли у поточній директорії. За допомогою команди `touch` створіть спеціальний файл, в якому будуть зберігатись правила для ігнорування небажаних файлів.

Answer: touch .gitignore

#
Header: Налаштування репозиторію: який файл відповідає за налаштування атрибутів?

Question: Вам необхідно явно встановити атрибути певних файлів у поточній директорії. За допомогою команди `touch` створіть спеціальний файл, в якому будуть зберігатись налаштування атрибутів типів файлів.

Answer: touch .gitattributes

#
Header: Додавання файлів у Git: як додавати файли у Git в область індексації?

Question: Введіть команду, яка додасть усі файли з поточної директорії в область індексації. 

Answer: git add .

#
Header: Додавання файлів у Git: як зберегти коміт?

Question: Усі необхідні файли знаходяться в області індексації. Введіть команду, яка збереже коміт з повідомленням «Initial commit». 

Answer: git commit -m "Initial commit"

#
Header: Додавання файлів у Git: як видаляти файли у Git?

Question: Введіть команду, яка додасть видалення файлу `testfile` в область індексації. 

Answer: git rm testfile

#
Header: Додавання файлів у Git: як перейменовувати та переміщувати файли у Git?

Question: Введіть команду, яка додасть перейменування файлу `testfile1` на `testfile2` в область індексації. 

Answer: git mv testfile1 testfile2

#
Header: Історія змін: як переглянути історію змін?

Question: Введіть команду, яка виведе зміни 2 останніх комітів. 

Answer: git log -p -2

#
Header: Скасування дій: як виправити коміт?

Question: Ви щойно зберегли коміт, однак, забули додати файл. Ви про нього одразу ж згадали і додали, він знаходиться в області індексації. Введіть команду, яка виправить останній коміт внесеними змінами. 

Answer: git commit --amend

#
Header: Скасування дій: як вилучити файл з області індексації?

Question: Ви випадково додали файл `example.py` в область індексації, але не плануєте зберігати його у коміті. Введіть команду, яка вилучить файл `example.py` з області індексації. 

Answer: git reset HEAD example.py

#
Header: Скасування дій: як скасувати зміни у модифікованому файлі?

Question: Ви внесли зміни у локальний файл `example.py`, але вирішили від них позбавитись. Введіть команду, яка вилучить локальні зміни з файлу `example.py`, тобто поверне його до стану, який наразі збережений у Git. 

Answer: git checkout -- example.py

